package com.example.modulebufferknife;


import com.example.modulebufferknifeantotations.IRouteGroup;
import com.example.modulebufferknifeantotations.IRouteRoot;
import com.example.modulebufferknifeantotations.Route;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.WildcardTypeName;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;

@AutoService(Processor.class)
public class RouteProcessor extends AbstractProcessor {

    private static final String PACKAGE_NAME = "com.alibaba.android.arouter.routes";
    private static final String CLASS_PREFIX = "ARouter$$Root$$";
    private static final String GROUP_CLASS_PREFIX = "ARouter$$Group$$";

    // 存储模块名与对应Group类的映射
    private final Map<String, String> rootMap = new TreeMap<>();

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        // 初始化时可以添加日志等操作
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return Collections.singleton(Route.class.getCanonicalName());
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        // 1. 收集所有@Route注解的元素
        Set<? extends Element> routeElements = roundEnv.getElementsAnnotatedWith(Route.class);

        // 2. 按模块分组（这里简化处理，假设所有cart模块的路由都有特定标记）
        for (Element element : routeElements) {
            Route route = element.getAnnotation(Route.class);
            if (route.path().startsWith("/cart/")) {  // 简单通过路径判断模块
                String groupName = "cart";
                rootMap.put(groupName, GROUP_CLASS_PREFIX + groupName);
            }
        }

        // 3. 生成Root类
        generateRootClass("module_cart");  // 假设模块名为module_cart

        return true;
    }

    /**
     * 生成Root路由类
     * @param moduleName 模块名称
     */
    private void generateRootClass(String moduleName) {
        // 1. 准备必要的类型
        ClassName iRouteGroup = ClassName.get(IRouteGroup.class);
        ClassName classClass = ClassName.get(Class.class);

        // 2. 构建方法参数类型: Map<String, Class<? extends IRouteGroup>>
        ParameterizedTypeName mapTypeName = ParameterizedTypeName.get(
                ClassName.get(Map.class),
                ClassName.get(String.class),
                ParameterizedTypeName.get(
                        classClass,
                        WildcardTypeName.subtypeOf(iRouteGroup)
                ));

        // 3. 构建loadInto方法
        MethodSpec loadIntoMethod = MethodSpec.methodBuilder("loadInto")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(mapTypeName, "routes")
                .addCode(buildMethodBody())
                .build();

        // 4. 构建类
        TypeSpec rootClass = TypeSpec.classBuilder(CLASS_PREFIX + moduleName)
                .addJavadoc("DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER.\n")
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(IRouteRoot.class)
                .addMethod(loadIntoMethod)
                .build();

        // 5. 写入文件
        try {
            JavaFile.builder(PACKAGE_NAME, rootClass)
                    .build()
                    .writeTo(processingEnv.getFiler());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 构建方法体代码
     */
    private String buildMethodBody() {
        StringBuilder builder = new StringBuilder();
        for (Map.Entry<String, String> entry : rootMap.entrySet()) {
            builder.append("routes.put(\"")
                    .append(entry.getKey())
                    .append("\", ")
                    .append(entry.getValue())
                    .append(".class);\n");
        }
        return builder.toString();
    }
}
